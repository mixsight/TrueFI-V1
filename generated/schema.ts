// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Allowance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Allowance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Allowance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Allowance", id.toString(), this);
  }

  static load(id: string): Allowance | null {
    return store.get("Allowance", id) as Allowance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }
}

export class Staker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Staker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Staker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Staker", id.toString(), this);
  }

  static load(id: string): Staker | null {
    return store.get("Staker", id) as Staker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get approvals(): Array<string> {
    let value = this.get("approvals");
    return value.toStringArray();
  }

  set approvals(value: Array<string>) {
    this.set("approvals", Value.fromStringArray(value));
  }

  get joinedPool(): boolean {
    let value = this.get("joinedPool");
    return value.toBoolean();
  }

  set joinedPool(value: boolean) {
    this.set("joinedPool", Value.fromBoolean(value));
  }

  get stake(): BigDecimal {
    let value = this.get("stake");
    return value.toBigDecimal();
  }

  set stake(value: BigDecimal) {
    this.set("stake", Value.fromBigDecimal(value));
  }

  get mintedLT(): BigDecimal {
    let value = this.get("mintedLT");
    return value.toBigDecimal();
  }

  set mintedLT(value: BigDecimal) {
    this.set("mintedLT", Value.fromBigDecimal(value));
  }

  get profit(): BigDecimal {
    let value = this.get("profit");
    return value.toBigDecimal();
  }

  set profit(value: BigDecimal) {
    this.set("profit", Value.fromBigDecimal(value));
  }

  get curveBalance(): BigDecimal | null {
    let value = this.get("curveBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set curveBalance(value: BigDecimal | null) {
    if (value === null) {
      this.unset("curveBalance");
    } else {
      this.set("curveBalance", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get joinedAtBlockNumber(): BigInt | null {
    let value = this.get("joinedAtBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set joinedAtBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("joinedAtBlockNumber");
    } else {
      this.set("joinedAtBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get exitedAtBlockNumber(): BigInt | null {
    let value = this.get("exitedAtBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exitedAtBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("exitedAtBlockNumber");
    } else {
      this.set("exitedAtBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Borrower extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Borrower entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Borrower entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Borrower", id.toString(), this);
  }

  static load(id: string): Borrower | null {
    return store.get("Borrower", id) as Borrower | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get debt(): BigDecimal {
    let value = this.get("debt");
    return value.toBigDecimal();
  }

  set debt(value: BigDecimal) {
    this.set("debt", Value.fromBigDecimal(value));
  }

  get joinedAtBlockNumber(): BigInt | null {
    let value = this.get("joinedAtBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set joinedAtBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("joinedAtBlockNumber");
    } else {
      this.set("joinedAtBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get repayedLoanAtBlockNumber(): BigInt | null {
    let value = this.get("repayedLoanAtBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set repayedLoanAtBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("repayedLoanAtBlockNumber");
    } else {
      this.set("repayedLoanAtBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }
}
